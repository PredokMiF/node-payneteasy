"use strict";

var path = require('path');
var fs = require('fs');
var _ = require('lodash-node');
var winston = require('winston');

/* UTIL */

function convertMsg (msg) {
    if (_.isString(msg)) {
        return msg;
    } else if (msg instanceof Error) {
        return msg.toString() + '\n' + msg.stack;
    } else if (_.isPlainObject(msg)) {
        return JSON.stringify(msg);
    } else {
        return msg;
    }
}

function getLogger (cfg) {
    var winstonLogCfg = {
        LOG_DIR: cfg.LOG_DIR,
        MAXSIZE: cfg.MAXSIZE
    };
    var transports = [];

    if (cfg.LOG_LEVELS.indexOf('error') !== -1) {
        transports.push(new (winston.transports.File)({
            name: 'error',
            maxsize: cfg.MAXSIZE,
            filename: path.join(cfg.LOG_DIR, '4-error.log'),
            level: 'error'
        }));
    }

    if (cfg.LOG_LEVELS.indexOf('warn') !== -1) {
        transports.push(new (winston.transports.File)({
            name: 'warn',
            maxsize: cfg.MAXSIZE,
            filename: path.join(cfg.LOG_DIR, '3-warn.log'),
            level: 'warn'
        }));
    }

    if (cfg.LOG_LEVELS.indexOf('info') !== -1) {
        transports.push(new (winston.transports.File)({
            name: 'info',
            maxsize: cfg.MAXSIZE,
            filename: path.join(cfg.LOG_DIR, '2-info.log'),
            level: 'info'
        }));
    }

    if (cfg.LOG_LEVELS.indexOf('debug') !== -1) {
        transports.push(new (winston.transports.File)({
            name: 'debug',
            maxFiles: 10,
            maxsize: cfg.MAXSIZE,
            filename: path.join(cfg.LOG_DIR, '1-debug.log'),
            level: 'debug'
        }));
    }

    if (process.argv.indexOf('consolelog') !== -1) {
        transports.push(new (winston.transports.Console)({
            level: (cfg.LOG_LEVELS.indexOf('debug') !== -1 ? 'debug' : (cfg.LOG_LEVELS.indexOf('info') !== -1 ? 'info' : (cfg.LOG_LEVELS.indexOf('warn') !== -1 ? 'warn' : 'error'))),
            json: true,
            stringify: true,
            prettyPrint: true,
            humanReadableUnhandledException: true,
            showLevel: true
        }));
    }

    return new (winston.Logger)({transports: transports});
}

/* STAT VARIABLES */

var logger;

/* METHODS */

/**
 *
 * @param [cfg] {Object}
 * @param [cfg.MAXSIZE] {Number}
 * @param [cfg.LOG_DIR] {String}
 */
function init (cfg) {
    cfg = _.defaults({}, cfg, {
        MAXSIZE: 1024,
        LOG_DIR: 'logs'
    });

    try {
        fs.statSync(cfg.LOG_DIR)
    } catch (e) {
        fs.mkdirSync(cfg.LOG_DIR);
    }

    logger = getLogger(cfg);
}

// debug, info, warn, error
function getLogerWrapper (logger, module) {
   return {
      debug: function (msg, cmnObj) {
         logger.log(
            'debug',
            convertMsg(msg),
             {
                 module: module,
                 level: undefined,
                 message: undefined,
                 cmn: cmnObj
             }
         )
      },

      info: function (msg, cmnObj) {
         logger.log(
            'info',
            convertMsg(msg),
             {
                 module: module,
                 level: undefined,
                 message: undefined,
                 cmn: cmnObj
             }
         )
      },

      warn: function (msg, cmnObj) {
         logger.log(
            'warn',
            convertMsg(msg),
             {
                 module: module,
                 level: undefined,
                 message: undefined,
                 cmn: cmnObj
             }
         )
      },

      error: function (msg, cmnObj) {
         logger.log(
            'error',
            convertMsg(msg),
             {
                 module: module,
                 level: undefined,
                 message: undefined,
                 cmn: cmnObj
             }
         )
      }
   };
}

function getDefLogger (module) {
    return logger && getLogerWrapper(logger, module) || null;
}

module.exports = getDefLogger;
module.exports.init = init;