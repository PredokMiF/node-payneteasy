"use strict";

var v = require('./stong-validator/app');

module.exports = v;

var tpl = /*v*/([
    // Типы string, number, boolean, object, arr

    // STRING - строки. Значения null и undefined будут удалены вместе с ключами из объекта, либо приведены к "", если проверяем элементарный тип
    // Синонимы: string, str, s
    'string',
    'str',
    's',
    // Попытаться преобразовыть элементарный тип в строку. null и undefined будут сконвертированы в ''. Этот флаг не создаст элемент, если крюч в объекте не задан
    's toString',
    's toStr',
    // В составе объекта требует наличае ключа, т.е. м.б. такая ситуация {myStr: ''} - валидно, для {mySrt: 's requiredKey'}
    's requiredKey',
    's reqKey',
    // В составе объекта требует наличае ключа и ненулевой длинны.
    //'s required',
    //'s req',
    // Значение по умолчанию, для null и undefined
    //'s default a',
    //'s def a',
    //'s default \'a b\'',
    //'s default "a b"',
    // Убрать лишние окружающие пробелы
    //'s trim',
    // Минимальная длинна
    's min 1',
    // Максимальная длинна
    's max 5',
    // Регулярка валидации
    //'s /qw/',

    // NUMBER
    // Синонимы: number, num, n
    'number',
    'num',
    'n',
    // Попытаться преобразовать строку в число, сразу проверяем на finite (по сути появляется флаг finite)
    'n toNumber',
    'n toNum',
    // Есть ли число и реальное ли оно
    'n finite',
    // В составе объекта требует наличае ключа, т.е. м.б. такая ситуация {myStr: 0} - валидно, для {mySrt: 'n requiredKey'}
    'n requiredKey',
    'n reqKey',
    // Тоже что и finite, но в составе объекта, помимо этого, требуется наличае ключа
    //'n required',
    //'n req',
    // Значение по умолчанию, для null, undefined и ""
    //'n default 1.5',
    //'n def 1',
    // Минимальное значение
    'n min -1',
    // Максимальное значение
    'n max 5',
    // требует целое число
    'n isCeil',
    // округления к целому
    'n ceil',
    'n round',
    'n floor',
    // После запятой должнор быть не более 2 цифр
    'n toFixed 2',

    // BOOLEAB - "из коробки" конвертаций нет
    // Синонимы: boolean, bool, b
    'boolean',
    'bool',
    'b',
    // В составе объекта требует наличае ключа, т.е. м.б. такая ситуация {myStr: false} - валидно, для {mySrt: 'b requiredKey'}
    's requiredKey',
    's reqKey',
    // В составе объекта, помимо этого, требуется наличае ключа
    //'b required',
    //'b req',
    // Конвертации из всех цифр по принципу 0===false, !0===true
    'b convert number',
    'b convert num',
    // Конвертации из всех цифр (из строк) (распаршеных из строки) по принципу '0'===false, !0===true
    'b convert sNumber',
    'b convert sNum',
    // Конвертация из строк on и off (on и off - синонимы)
    'b convert on',
    'b convert off',
    // Конвертация из строк true и false (true и false - синонимы)
    'b convert true',
    'b convert false',
    // Можно писать через запятую, но без пробелов
    'b convert num,sNum,on,true',
    // Можно написать проще
    'b convert all'
]);

// Синонимы
var arr = {
    uuid: 'string /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i'
};