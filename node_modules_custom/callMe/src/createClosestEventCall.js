"use strict";

var _ = require('lodash-node');

var cmn = require('./cmnData');
var execClosestEv = require('./execClosestEv');

var SEC = 1000;

// Объявления функции поиска и запоминания ближайшей задачи (createClosestEventCall)
var closestEvDate;

function createClosestEventCall () {
    cmn.db
        .oneOrNone('' +
            'SELECT "id", "event_type", "user_uuid", "call_at_time", "blocked_at", "call_data", "event_data", "created"' +
            ' FROM "call_by_time_events"' +
            ' WHERE blocked_at IS NULL' +
            ' ORDER BY "call_at_time"' +
            ' LIMIT 1;'
        )
        .then(function(data) {
            closestEvDate(data ? data.call_at_time : null);
        })
        .then(
        null,
        function(err){
            console.error('createClosestEventCall: ' + err.toString());
        }
    )
}

closestEvDate = (function() {
    var oldTimestamp;
    var timeout;

    return function (date) {
        var dateTime, nowTime, timeoutDelta;

        if (_.isDate(date)) {
            dateTime = date.getTime();
            nowTime = Date.now();
            timeoutDelta = (dateTime >= nowTime) ? (dateTime - nowTime + SEC) : 0;
            if (!oldTimestamp || dateTime < oldTimestamp) {
                oldTimestamp = dateTime;
                timeoutDelta = timeoutDelta < cmn.EVENT_POOL_INTERVAL * 2 ? timeoutDelta : cmn.EVENT_POOL_INTERVAL * 2;

                timeout && clearTimeout(timeout);
                timeout = setTimeout(function () {
                    oldTimestamp = undefined;
                    execClosestEv();
                }, timeoutDelta); // Баг, если число больше 2 милиардов (больше максимального целого без экспоненты) то колбэк вызывается тутже
            }
        } else if (_.isNull(date)) {
            oldTimestamp = undefined;
            timeout && clearTimeout(timeout);
        } else {
            console.error('closestEvDate: invalid argument date');
        }
    }
}());

module.exports = createClosestEventCall;