"use strict";

var _ = require('lodash-node');

var getType;
var smartSpaceSplit = require('../spaceSplit');

function fromArr (fullKey, tplStr, tplObj, arrItems, cfg) {
    var items = smartSpaceSplit(tplStr), item,
        i, l;

    if (!getType) {
        // lazy. Иначе циркулярная зависимость модулей
        getType = require('./getType');
    }

    var obj = {};

    if (items === false) {
        return 'Ошибка шаблона: В шаблоне присутствуют спец. знаки' + (fullKey ? (' (поле ' + fullKey + ')') : '') + ' ' + (new Error()).stack;
    } else if (!_.isPlainObject(tplObj)) {
        return 'Ошибка шаблона: Шаблон объекта не задан как объект' + (fullKey ? (' (поле ' + fullKey + ')') : '') + ' ' + (new Error()).stack;
    }

    item = items[0];

    if (item === 'obj' || item === 'object') {
        obj.t = 'obj';
    } else {
        return 'Ошибка шаблона: В шаблоне первым делом должен идти тип ' + (fullKey ? (' (поле ' + fullKey + ')') : '') + ' ' + (new Error()).stack;
    }

    for (i = 1, l = items.length; i < l; i += 1) {
        item = items[i];
        switch (item) {
            case 'requiredKey':
            case 'reqKey':
                obj.reqKey = true;
                break;
            case 'soft':
                obj.soft = true;
                break;
            default:
                return 'Ошибка шаблона: Неопознанный тег "' + item + '"' + (fullKey ? (' (поле ' + fullKey + ')') : '') + ' ' + (new Error()).stack;
        }
    }

    if ( arrItems && _.some(arrItems, function (el, pos) { return !_.isFunction(el); })) {
        return 'Ошибка шаблона: Валидаторами могут быть только функции' + (fullKey ? (' (поле ' + fullKey + ')') : '') + ' ' + (new Error()).stack;
    }

    obj.customValidators = arrItems;

    obj.tplKeys = [];
    obj.tplKeysReq = [];
    obj.tpl = {};

    // Возвращаем первую попавшуюся ошибку, либо распаршеный объект
    return _.map(tplObj, function (val, key) {
        val = getType((fullKey ? fullKey + '.' + key : key), key, val);
        if (_.isString(val)) {
            return val;
        } else {
            obj.tpl[key] = val;
            obj.tplKeys.push(key);
            if (val.reqKey) {
                obj.tplKeysReq.push(key);
            }
        }
    }).filter(function(val){return val;})[0] || obj;
}

module.exports = {
    fromArr: fromArr
};