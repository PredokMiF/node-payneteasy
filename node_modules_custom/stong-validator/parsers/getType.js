"use strict";

var _ = require('lodash-node');

var stringParser = require('./string');
var numberParser = require('./number');
var boolParser = require('./bool');
var dictParser = require('./dict');
var anyParser = require('./any');
var objParser = require('./obj');
var arrParser = require('./arr');

function getType (fullKey, key, tpl, cfg) {
    var baseCfgStr, validators;

    if (_.isString(tpl)) {
        return getType(fullKey, key, [tpl], cfg);
    } else if (_.isArray(tpl)) {
        if (tpl.length === 0) {
            return 'Ошибка шаблона: Передан пустой массив' + (fullKey ? ('(поле ' + fullKey + ')') : '') + ' ' + (new Error()).stack;
        } else if (_.isPlainObject(tpl[0])) {
            tpl.unshift('obj');
        } else if (!_.isString(tpl[0])) {
            return 'Ошибка шаблона: Первый элемент массива должен быть строкой' + (fullKey ? (' (поле ' + fullKey + ')') : '') + ' ' + (new Error()).stack;
        }

        baseCfgStr = tpl[0];
        validators = _.rest(tpl);
        switch (baseCfgStr.split(' ')[0]) {
            case 's':
            case 'str':
            case 'string':
                return stringParser.fromArr(
                    fullKey,
                    baseCfgStr,
                    validators,
                    cfg
                );
            case 'n':
            case 'num':
            case 'number':
                return numberParser.fromArr(
                    fullKey,
                    baseCfgStr,
                    validators,
                    cfg
                );
            case 'b':
            case 'bool':
            case 'boolean':
                return boolParser.fromArr(
                    fullKey,
                    baseCfgStr,
                    validators,
                    cfg
                );
            case 'dict':
            case 'dictionary':
                return dictParser.fromArr(
                    fullKey,
                    baseCfgStr,
                    validators,
                    cfg
                );
            case 'any':
                return anyParser.fromArr(
                    fullKey,
                    baseCfgStr,
                    validators,
                    cfg
                );
            case 'obj':
            case 'object':
                return objParser.fromArr(
                    fullKey,
                    baseCfgStr,
                    validators[0],
                    _.rest(validators),
                    cfg
                );
            case 'arr':
            case 'array':
                return arrParser.fromArr(
                    fullKey,
                    baseCfgStr,
                    validators[0],
                    _.rest(validators),
                    cfg
                );
            default:
                return 'Ошибка шаблона: Неизвестный тип: ' + baseCfgStr.split(' ')[0] + (fullKey ? (' (поле ' + fullKey + ')') : '') + ' ' + (new Error()).stack;
        }
    } else if (_.isPlainObject(tpl)) {
        return objParser.fromArr(
            fullKey,
            'obj',
            tpl,
            [],
            cfg
        );
    } else {
        return 'Ошибка шаблона: Передан недопустимый тип данных' + (fullKey ? (' (поле ' + fullKey + ')') : '') + ' ' + (new Error()).stack;
    }
}

module.exports = getType;