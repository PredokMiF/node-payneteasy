"use strict";

var when = require('when');

var stringExecutor = require('./string');
var numberExecutor = require('./number');
var boolExecutor = require('./bool');
var dictExecutor = require('./dict');
var anyExecutor = require('./any');
var objExecutor = require('./obj');
var arrExecutor = require('./arr');

function executor (fullKey, tpl, obj, cfg) {
    var def = when.defer();

    switch (tpl.t) {
        case 's':
            stringExecutor(fullKey, tpl, cfg, obj, function (err, data) {
                if (err) {
                    def.reject(err);
                } else {
                    def.resolve(data);
                }
            });
            break;
        case 'n':
            numberExecutor(fullKey, tpl, cfg, obj, function (err, data) {
                if (err) {
                    def.reject(err);
                } else {
                    def.resolve(data);
                }
            });
            break;
        case 'b':
            boolExecutor(fullKey, tpl, cfg, obj, function (err, data) {
                if (err) {
                    def.reject(err);
                } else {
                    def.resolve(data);
                }
            });
            break;
        case 'dict':
            dictExecutor(fullKey, tpl, cfg, obj, function (err, data) {
                if (err) {
                    def.reject(err);
                } else {
                    def.resolve(data);
                }
            });
            break;
        case 'any':
            anyExecutor(fullKey, tpl, cfg, obj, function (err, data) {
                if (err) {
                    def.reject(err);
                } else {
                    def.resolve(data);
                }
            });
            break;
        case 'obj':
            objExecutor(fullKey, tpl, cfg, obj, function (err, data) {
                if (err) {
                    def.reject(err);
                } else {
                    def.resolve(data);
                }
            });
            break;
        case 'arr':
            arrExecutor(fullKey, tpl, cfg, obj, function (err, data) {
                if (err) {
                    def.reject(err);
                } else {
                    def.resolve(data);
                }
            });
            break;
        default:
            def.reject('Неизвестный тип для execut\'ора: ' + tpl.t);
    }

    return def.promise;
}

module.exports = executor;