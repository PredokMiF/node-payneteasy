#!/usr/bin/env node

"use strict";

var path = require('path');
var http = require('http');

// Глобальные костанты
global.__cfgDir = path.join(__dirname, '../', 'cfg') + path.sep;
global.__cfg = path.join(global.__cfgDir, 'cfg');
global.__initCfg = path.join(global.__cfgDir, 'initCfg');
global.__modulesCustom = path.join(__dirname, '../', 'node_modules_custom') + path.sep;
global.__pne = path.join(__dirname, 'pne') + path.sep;
global.__dao = path.join(__dirname, 'dao') + path.sep;
global.__util = path.join(__dirname, 'util') + path.sep;

var logger;

require(__initCfg).then(
    createServer,
    function (err) {
        logger = require(__modulesCustom + 'logger')('www');

        if (logger) {
            logger.error(err)
        } else {
            console.error((err instanceof Error) ? err.stack : err);
        }
    }
);

function createServer () {
    logger = require(__modulesCustom + 'logger')('www');
    var app = require('./app');

    var port = normalizePort(process.env.PORT || '3000');
    app.set('port', port);

    var server = http.createServer(app);

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);

    function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        var bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

        switch (error.code) {
            case 'EACCES':
                logger.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                logger.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    }

    function onListening() {
        var addr = server.address();
        var bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        logger.info('Listening on ' + bind);
    }
}

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        return port;
    }

    return false;
}