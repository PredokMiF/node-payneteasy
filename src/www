#!/usr/bin/env node

"use strict";

var path = require('path');
var debug = require('debug')('payneteasy:server');
var http = require('http');

// Глобальные костанты
global.__cfgDir = path.join(__dirname, '../', 'cfg') + path.sep;
global.__cfg = path.join(global.__cfgDir, 'cfg');
global.__initCfg = path.join(global.__cfgDir, 'initCfg');
global.__modulesCustom = path.join(__dirname, '../', 'node_modules_custom') + path.sep;
global.__pne = path.join(__dirname, 'pne') + path.sep;
global.__dao = path.join(__dirname, 'dao') + path.sep;
global.__util = path.join(__dirname, 'util') + path.sep;


require(__initCfg).then(
    //createServer,

    // DEBUG START
    function(){
        var reqData = {

        // Перевод

/* R */     endpointid: 815,
            // Transaction UUID (Пользовательский идентификатор заказа.) (128/String)
/* R */     transactionUuid: '522a5e84-3193-41d1-9d7b-5921a1c20a8d', /* DATA REQUIRED */
            // id транзакции у PayNetEasy. Появится после <кто-то>Request: preauthReq, captureReq, wireTransferReq, cardRegReq
/* ПОТОМ */ preauthPneId: '20796629',
/* ПОТОМ */ preauthStatusPneId: [],
/* ПОТОМ */ capturePneId: '20796629',
/* ПОТОМ */ captureStatusPneId: [],
/* ПОТОМ */ wireTransferPneId: '20954407',
/* ПОТОМ */ wireTransferStatusPneId: [],

/* ПОТОМ */ returnPneId: '',
/* ПОТОМ */ returnStatusPneId: [],

/* ПОТОМ */ cardRegPneId: '',
            // Сумма перевода (целевой платеж). Копейки от рублей отделяются точкой. Например 10.5 (10/Numeric)
/* R */     amount: 10, /* DATA REQUIRED */
            // Сумма которую ПО зажимает себе. Копейки от рублей отделяются точкой. Например 10.5 (10/Numeric)
/* R */     comission: 0.5, /* DATA REQUIRED */
            // НДС (сумма) (10/Numeric)
/* D */     NDS: 0,
            // Трехзначный код валюты платежа, например RUB (3/String)
/* D */     currency: 'RUB',
            // Назначение платежа (125/String)
/* R */     'order_desc': 'order_desc!',
            // Комментарий отмеры транзакции (50/String)
/* D */     returnComment: 'Transaction error',

        // Плательщик

            // UUID плательщика
/* R */     userUuid: 'qwe-qwe-qwe',
            // Customer’s first name (50/String)
            //payer_first_name: '',
            // Customer’s last name (50/String)
            //payer_last_name: '',
            // ФИО плательщика (128/String)
/* R */     payerFullname: 'Фио Фио Фиович',
            // Customer’s date of birth, in the format YYYYMMDD. (6/Numeric)
            //payer_birthday: '',
            // Тип, серия и номер документа, удостоверяющего личность. Укажите нужный тип документа (2 цифры) + запятая + символы от 4 до 64 (64/String)
/* R */     payerIdentityDocument: '01,1111123123',
            // Last four digits of the customer’s social security number. (4/Numeric)
            //payer_ssn: '',
            // E-mail плательщика (128/String)
/* R */     payer_email: 'email@mail.ru', /* DATA REQUIRED */
            // Телефон плательщика (15/String)
            //payer_phone: '',
            // Полный телефон плательщика, вместе с кодом города (15/String)
            //payer_cell_phone: '',
            // Код страны плательщика (2/String)
/* D */     payer_country: 'RU', /* DEFAULT */
            // Customer’s state (two-letter US state code). Please see Appendix A for a list of valid US state codes. Not applicable outside the US. (2/String)
            //payer_state: '',
            // Город плательщика (50/String)
/* R */     payer_city: 'city', /* DATA REQUIRED */
            // Почтовый индекс плательщика (10/String)
            //payer_zip_code: '000000', /* DATA REQUIRED */
/* R */     payer_zip_code: '420107', /* DATA REQUIRED */
            // (50/String)
/* R */     payer_address1: 'address1!', /* DATA REQUIRED */
            // IP адрес плательщика (20/String)
/* R */     payer_ipaddress: '127.0.0.0', /* DATA REQUIRED */

        // Карта плательщика

/* ПОТОМ */ cardType: 'VISA',
/* ПОТОМ */ cardBankName: 'ALFA BANK',
/* ПОТОМ */ cardLastFourDigits: '9651',

        // Получатель

            // Получатель платежа (255/String)
/* R */     recipientName: 'recipient Name name',
            // ИНН получателя (255/String)
/* R */     recipientInn: '123123123',
            // Номер счета получателя (20/Numeric)
/* R */     recipientAccountNumber: '123123123',
            // БИК банка получателя (9/Numeric)
/* R */     recipientBankBic: '123123',

        // Остальное

            // URL the cardholder will be redirected to upon completion of the transaction. Please note that the cardholder will be redirected in any case, no matter whether the transaction is approved or declined. (128/String)
/* R */     redirect_url: 'http://ya.ru' /* DATA REQUIRED */
            // URL the original sale is made from. (128/String)
            //site_url: ''
            // URL the transaction result will be sent to. Merchant may use this URL for custom processing of the transaction completion, e.g. to collect sales data in Merchant’s database. See more details at Merchant Callbacks (128/String)
            //server_callback_url: ''
        };



        //var req = require(__pne + 'preauthReq');
        //var req = require(__pne + 'preauthStatusReq');
        //var req = require(__pne + 'captureReq');
        //var req = require(__pne + 'captureStatusReq');
        //var req = require(__pne + 'wireTransferReq');
        //var req = require(__pne + 'wireTransferStatusReq');

        //var req = require(__pne + 'returnReq');
        //var req = require(__pne + 'returnStatusReq');

        req(reqData)
            .then(
                function(data){
                    console.log('data');
                    console.log(data);
                },
                function(err){
                    console.log('err');
                    console.log(err);
                }
            );
    },
    // DEBUG END
    function (err) {
        if (err instanceof Error) {
            console.error(err.stack);
        } else {
            console.error(err);
        }
    }
);

function createServer () {
    var app = require('./app');

    var port = normalizePort(process.env.PORT || '3000');
    app.set('port', port);

    var server = http.createServer(app);

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);

    function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        var bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    }

    function onListening() {
        var addr = server.address();
        var bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        debug('Listening on ' + bind);
    }
}

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        return port;
    }

    return false;
}